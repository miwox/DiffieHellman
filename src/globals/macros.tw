:: Macros {"position":"375,1050"}
# Dev-Page
<!-- Global variables passed to all the game --->
(set: $BLOCKER_1 to false)\
(set: $BlOCKER_2 to false)\
(set: $SCORE to 0)\

<!-- Global constants --->
(set: $CHECKBOX_TEXT to "Choose the correct answer!")\
(set: $ALERT_CORRECT to "Correct Answer! Congratulation.")\
(set: $ALERT_ALREADY_DONE to "Already answered")\
(set: $ALERT_WRONG_ANSWER to "Sorry, your answer is wrong")\

<!-- Trainings scene constants --->
(set: $COMMON_PRIME to "30539")\
(set: $COMMON_GEN to "30404")\
(set: $BOBS_SECRET to "29343")\
(set: $ALICE_SECRET to "4534")\

<!-- This constants will be calculated at the beginning of the game-->
(set: $ALICE_PUBLICKEY to "")\
(set: $BOBS_PUBLICKEY to "")\
(set: $BOBS_SECRET_KEY to "")\
(set: $ALICE_SECRET_KEY to "")\
<!-- End of trainings scene constants-->




<!--- Scene 4 global constants -->

(set: $COMMON_PRIME_2 to "7")\
(set: $COMMON_GEN_2 to "3")\
(set: $BASE_64_SEPARATOR to " is COMMON PRIME\n::::::::::HELLO BOB IT'S ME ALICE::::::::::\n is GENERATOR ")\

<!-- Will be computed in JavaScript -->

(set: $BASE_64_ENCODED to "")\


(set: $ALICE_SECRET_MESSAGE to "31.12.2022-49.484284, 8.464212. WE ARE ALL MAD HERE")\
(set: $ALICE_SECRET_2 to "")\
(set: $BOBS_SECRET_2 to "")\
(set: $BOBS_PUBLICKEY_2 to "")\
(set: $ALICE_PUBLICKEY_2 to "")\
<!-- Alice choosen generator and prime key into a base64 string -->


(set: $PRIMEFORTHESTORY to "7")\
(set: $NUMBERFORTHESTORY to "3")\


<!--- BASE64-Encoding-->


<!-- Calculate the different keys for the training and save them into globals constants.-->
<script>
var common_prime = BigInt($COMMON_PRIME);
var common_gen = BigInt($COMMON_GEN);
var alice_secret = BigInt($ALICE_SECRET);
var bobs_secret = BigInt($BOBS_SECRET);

window.pow = function (a, b, n) {
  a = a % n;
  var result = 1n;
  var x = a;

  while (b > 0n) {
    var leastSignificantBit = b % 2n;
    b = b / 2n;

    if (leastSignificantBit == 1n) {
      result = result * x;
      result = result % n;
    }

    x = x * x;
    x = x % n;
  }
  return result;
}

var alicePublicKeyn = pow(common_gen, alice_secret, common_prime);
var bobPublicKeyn = pow(common_gen, bobs_secret, common_prime);
var aliceKey = pow(bobPublicKeyn, alice_secret, common_prime);
var bobsKey = pow(alicePublicKeyn, bobs_secret, common_prime);

$ALICE_PUBLICKEY = alicePublicKeyn.toString();
$BOBS_PUBLICKEY = bobPublicKeyn.toString();
$ALICE_SECRET_KEY = aliceKey.toString();
$BOBS_SECRET_KEY = bobsKey.toString();
</script>\

<!-- Base64 encryption --->
<script>
$BASE_64_ENCODED = btoa($COMMON_PRIME_2 + $BASE_64_SEPARATOR + $COMMON_GEN_2);
</script>

<!-- Logging global variables/constants for debugging ---------------------------------------->

(set: $LOG_GLOBALS to (macro: [
    (output:)[\
<script>
console.log("Common Prime: " + $COMMON_PRIME);
console.log("Common Gen: " + $COMMON_GEN);
console.log("Alice Secret: " + $ALICE_SECRET);
console.log("Bobs Secret: " + $BOBS_SECRET );
console.log("Bobs Public: " + $BOBS_PUBLICKEY);
console.log("Alice Public: " + $ALICE_PUBLICKEY);
console.log("Bobs Secret Key: " + $BOBS_SECRET_KEY);
console.log("Bobs Secret Key: " + $ALICE_SECRET_KEY);
</script>\
]]))



<!-- Pass a text, a place; and a additional text which will be displayed after clicking on the place holder.
_hideStr hast to be command-type to provided nested calls of this method :)-->
(set: $continueTextClick to (macro: str-type _showStr, str-type _placeHolderStr, command-type _hideStr, [
    (output:)[\
    _showStr
    _placeHolderStr\
    (click-replace: _placeHolderStr)[\
        _hideStr]\
]]))

<!-- Macro for evaluate quiz-->
(set: $evaluateQuiz to (macro: boolean-type _answer1, boolean-type _shouldBe1, boolean-type _answer2, boolean-type _shouldBe2, boolean-type _answer3, boolean-type _shouldBe3, [
    (output:)[(print: _answer1 is _shouldBe1 and _answer2 is _shouldBe2 and _answer3 is _shouldBe3)]
]))\

<!-- Macro for evaluate quiz-->
(set: $createQuizBox3 to (macro: boolean-type _answer1, boolean-type _shouldBe1, boolean-type _answer2, boolean-type _shouldBe2, boolean-type _answer3, boolean-type _shouldBe3, [
    (output:)[(print: _answer1 is _shouldBe1 and _answer2 is _shouldBe2 and _answer3 is _shouldBe3)]
]))\

<!-- Macro for showing the button so that Bob can read the message of Alice -->
(set: $showBase64MessageButton to (macro: [
    (output:)[\
<Button class="button-28" role="button" onClick="evaluateButton()">Show me the message!</Button>
<textarea rows="4" cols="25"></textarea>
<script>
window.evaluateButton = () => {
let latex = window.document.querySelector("textarea");
latex.innerText = $BASE_64_ENCODED;
}
</script>
]]))

<!-- Macro for show input fields and a button to evaluate the input of Bob. Also setting the blocker variable --->
(set: $inputButtonDecodedBase64Elements to (macro: [
  
    (output:)[\
Enter the common prime number
<input type="text" id="prime" required/>
Enter the common generator
<input type="text" id="generator" required />
<button class="button-28" role="button" onclick="evaluateDecodedElementsSetBlocker()">Check the numbers</button>
</div>
<!-- Evaluate the input string of Bob-->
<script>
window.evaluateDecodedElementsSetBlocker = function(){
    //get the user input for prime and number
       let prime = document.getElementById('prime').value;
       let generator = document.getElementById('generator').value;
       console.log("Prime Input: " + prime);
       console.log("Generator Input: " + generator);

       if($BLOCKER_1){
        alert($ALERT_CORRECT);
       } else if (prime !== $COMMON_PRIME_2){
        alert($ALERT_WRONG_ANSWER);
       } else if (generator !== $COMMON_GEN_2){
        alert($ALERT_WRONG_ANSWER);
       } else {
        alert($ALERT_CORRECT);
        $BLOCKER_1 = true;
       }
}
</script>
]]))

<!--- Input fileds for Bob's secret and Bob's public key -->

(set: $inputButtonSendPublicKey to (macro: [
    (output:)[\
        <div class="inline">
        <div class="left-container">
        Your secret:
        <input type="number" id="secretbob" required/>
        </div>
        <div class ="right-container">
        Your public key:
        <input type="number" id="publickey" required />
        <button class="button-28" role="button" onclick="evaluateSendBobsKey()">Send your public key</button>
        </div>
        </div>


 <script>

// Redundant code, but because of Twine.
 window.pow = function (a, b, n) {
  a = a % n;
  var result = 1n;
  var x = a;

  while (b > 0n) {
    var leastSignificantBit = b % 2n;
    b = b / 2n;

    if (leastSignificantBit == 1n) {
      result = result * x;
      result = result % n;
    }

    x = x * x;
    x = x % n;
  }
  return result;
}

 window.evaluateSendBobsKey = function(){

        const secretbob = BigInt(document.getElementById('secretbob').value);
        const secretalice = secretbob - 1n;
        const commonPrime = BigInt($COMMON_PRIME_2);
        const commonGen = BigInt($COMMON_GEN_2);
        const keyIs = BigInt(document.getElementById('publickey').value);
        const keyShould = pow(commonGen, secretbob, commonPrime);
        const keyAlice = pow(commonGen, secretalice, commonPrime);
        if(secretbob >= commonPrime){
            alert("Your Secret is too big :(");
        } else if(keyIs == keyShould){
            alert("Good choice!");
            $BLOCKER_1 = true;
            $BOBS_SECRET_2 = secretbob.toString();
            $ALICE_SECRET_2 = secretalice.toString();
            $ALICE_PUBLICKEY_2 = keyAlice.toString();
            $BOBS_PUBLICKEY_2 = keyShould.toString();
        } else {
            alert("Your public key ist false");
        }
}
</script>
]]))


<!-- Macro for displaying and evaluating a quiz-->
(set: $makeQuiz to (macro: str-type _passage1, boolean-type _shouldBe11, str-type _passage2, boolean-type _shouldBe22, str-type _passage3, boolean-type _shouldBe33, [
    (output:)[
        (set: _quizPassage1Is to false)\
        (set: _quizPassage2Is to false)\
        (set: _quizPassage3Is to false)\
        (set: _shouldBe1 to _shouldBe11)\
        (set: _shouldBe2 to _shouldBe22)\
        (set: _shouldBe3 to _shouldBe33)\
        $CHECKBOX_TEXT
        <div class="quiz">\
        (checkbox: bind _quizPassage1Is, _passage1)
        (checkbox: bind _quizPassage2Is, _passage2)
        (checkbox: bind _quizPassage3Is, _passage3)
        <button type="button" class="button-28"
        onClick="evaluateButton()"
        quiz-argFirst-is= '_quizPassage1Is'
        quiz-argFirst-should='_shouldBe1'
        quiz-argSecond-is='_quizPassage2Is'
        quiz-argSecond-should='_shouldBe2'
        quiz-argThird-is='_quizPassage3Is'
        quiz-argThird-should='_shouldBe3'> Evaluate </button>\
        <script>
        window.evaluateButton = () => { 
        let arg0i = window.event.target.getAttribute('quiz-argFirst-is');
        let arg0s = window.event.target.getAttribute('quiz-argFirst-should');
        let arg1i = window.event.target.getAttribute('quiz-argSecond-is');
        let arg1s = window.event.target.getAttribute('quiz-argSecond-should');
        let arg2i = window.event.target.getAttribute('quiz-argThird-is');
        let arg2s = window.event.target.getAttribute('quiz-argThird-should');
        // debugging...
        console.log('arg0i: ' + arg0i);
        console.log('arg1i: ' + arg1i);
        console.log('$BLOCKER_1: ' + $BLOCKER_1);
        console.log('arg 1 is: ' + eval(arg0i));
        console.log('arg 1 should be: ' + eval(arg0s));
        console.log('(eval(arg0i) == eval(arg0s)): ' + (eval(arg0i) == eval(arg0s)));
        console.log('eval(arg1i) == eval(arg1s))' + (eval(arg1i) == eval(arg1s)));
        console.log('(eval(arg2i) == eval(arg2s)) ' + (eval(arg2i) == eval(arg2s)));
        
        //check correct answer
        if(!$BLOCKER_1 && (eval(arg0i) == eval(arg0s)) && (eval(arg1i) == eval(arg1s)) && (eval(arg2i) == eval(arg2s))){
            console.log("Correct Evaluation!!");
            $SCORE += 100;
            // debugging...
            console.log($SCORE);
            console.log($BLOCKER_1);
            $BLOCKER_1 = true;
            console.log($BLOCKER_1);
            alert($ALERT_CORRECT);
        } else if ($BLOCKER_1){
            alert($ALERT_ALREADY_DONE);
        } else {
            alert($ALERT_WRONG_ANSWER);
        }
    }
        </script>
    ]]))

<!-- START STORY HERE! ---------------------------------------->
(go-to: "Intro")

:: Refresh-Button {"position":"375,1050"}
<button class="button-28" role="button" type="button" onClick="window.location.reload()">\
Formula not shown right...
<script>

(function()
{
  if( window.localStorage )
  {
    if( !localStorage.getItem('firstLoad') )
    {
      localStorage['firstLoad'] = true;
      window.location.reload();
    }  
    else
      localStorage.removeItem('firstLoad');
  }
})();

</script>
